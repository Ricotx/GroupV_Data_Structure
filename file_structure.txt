# Project File Structure Guide - Data Structures Assignment

## 📁 Project Overview
This project implements job matching algorithms using two different data structures (Linked List vs Array) for performance comparison. The project is designed for two teams to work independently while ensuring fair comparison.

---

## 📂 Directory Structure

```
cpp_data_structures/
├── 📁 csv/                           # Data files directory
│   ├── job_description.csv          # Job data (input)
│   └── resume.csv                   # Resume data (input)
├── 📄 main.cpp                      # Main driver program
├── 📄 main.exe                      # Compiled executable
├── 📄 README.md                     # Project documentation
├── 📄 team_guide.txt                # Implementation guidelines
├── 📄 file_structure.txt            # This file
│
├── 🔧 Core Data Structures
├── 📄 linkedlist.hpp                # Custom linked list implementation
├── 📄 array.hpp                      # Custom array implementation (template)
│
├── 🗄️ Data Storage Classes
├── 📄 linkedlist_datastorage.hpp     # Linked list data management
├── 📄 array_datastorage.hpp          # Array data management (template)
│
├── 🧩 Supporting Components
├── 📄 model.hpp                     # Data models (Job, Resume, CustomString, CustomArray)
├── 📄 preprocessor.hpp              # Text preprocessing functions
├── 📄 readcsv.hpp                   # CSV file reading functions
│
└── 🧪 Test Drivers
    ├── 📄 test_linkedlist.cpp        # Linked list team test driver
    └── 📄 test_array.cpp             # Array team test driver
```

---

## 📋 File Descriptions

### 🎯 **Main Driver Program**
- **`main.cpp`** - Main entry point and system driver
  - **Purpose**: Orchestrates both Linked List and Array implementations
  - **Features**: Menu interface, performance comparison, results display
  - **Status**: ✅ Complete and ready
  - **Usage**: Compile and run to test both implementations

### 🔧 **Core Data Structures**

#### **`linkedlist.hpp`** - Custom Linked List Implementation
- **Purpose**: Generic doubly linked list data structure
- **Team**: Linked List Team
- **Status**: ✅ Basic implementation complete
- **Key Features**:
  - `CustomLinkedList<T>` template class
  - `push_back()`, `operator[]`, `getSize()`, `empty()`, `clear()`
  - Copy constructor and assignment operator
  - Memory management with destructor
- **Current Functions**:
  ```cpp
  void push_back(const T& item);           // Add item to end
  T& operator[](int index);                // Access by index
  int getSize() const;                      // Get current size
  bool empty() const;                       // Check if empty
  void clear();                            // Clear all items
  ```

#### **`array.hpp`** - Custom Array Implementation (Template)
- **Purpose**: Generic dynamic array data structure
- **Team**: Array Team
- **Status**: 📋 Template ready for implementation
- **Current Content**: Placeholder `CustomArrayV2<T>` class
- **To Implement**:
  ```cpp
  template<typename T>
  class CustomArrayV2 {
      // Dynamic array with resizing
      // push_back(), operator[], size(), empty(), clear()
      // Memory management and copy operations
  };
  ```

### 🗄️ **Data Storage Classes**

#### **`linkedlist_datastorage.hpp`** - Linked List Data Management
- **Purpose**: Manages job and resume data using linked lists
- **Team**: Linked List Team
- **Status**: ✅ Data loading complete, 📋 Algorithms pending
- **Current Features**:
  - `LinkedListDataStorage` class
  - `CustomLinkedList<Job> jobList`
  - `CustomLinkedList<Resume> resumeList`
  - `loadLinkedListData()` - Loads and preprocesses data
  - `displaySampleData()` - Shows sample data
  - `testLinkedListOperations()` - Basic testing
- **To Implement** (Phase 3):
  ```cpp
  // Sorting Algorithms
  void bubbleSortJobsByTitle();
  void bubbleSortJobsBySkillCount();
  void bubbleSortResumesBySkillCount();
  
  // Searching Algorithms
  Job* linearSearchJobByTitle(const CustomString& title);
  Resume* linearSearchResumeBySkill(const CustomString& skill);
  Job* binarySearchJobByTitle(const CustomString& title);
  Job* binarySearchJobBySkillCount(int skillCount);
  
  // Job Matching Algorithms
  double calculateWeightedMatchScore(const Job& job, const Resume& resume);
  CustomLinkedList<Job> findTopMatchesForResume(const Resume& resume, int topN);
  ```

#### **`array_datastorage.hpp`** - Array Data Management (Template)
- **Purpose**: Manages job and resume data using arrays
- **Team**: Array Team
- **Status**: 📋 Template ready for implementation
- **Current Content**: Placeholder `ArrayDataStorage` class
- **To Implement**:
  ```cpp
  class ArrayDataStorage {
      CustomArrayV2<Job> jobArray;      // Using CustomArrayV2 from array.hpp
      CustomArrayV2<Resume> resumeArray;
      bool loadArrayData();             // Load and preprocess data
      void displaySampleArrayData();   // Show sample data
      void testArrayOperations();      // Basic testing
      // Same algorithms as linked list team
  };
  ```

### 🧩 **Supporting Components**

#### **`model.hpp`** - Data Models
- **Purpose**: Defines core data structures and models
- **Team**: Shared by both teams
- **Status**: ✅ Complete
- **Key Components**:
  - `CustomString` - Custom string implementation
  - `CustomArray<T>` - Basic array for storing skills
  - `Job` struct - Job description model
  - `Resume` struct - Resume model
- **Important Note**: `CustomArray<T>` in this file is for storing skills within Job/Resume, NOT the main data structure for Array Team

#### **`preprocessor.hpp`** - Text Preprocessing
- **Purpose**: Processes raw job descriptions and resumes
- **Team**: Shared by both teams
- **Status**: ✅ Complete
- **Key Functions**:
  - `preprocessJobDescription()` - Clean and categorize job data
  - `preprocessResumeDescription()` - Extract skills from resumes
  - `buildValidSkillset()` - Create valid skill categories
  - Text cleaning: `convertToLowerCase()`, `trim()`, `countWords()`

#### **`readcsv.hpp`** - CSV File Reading
- **Purpose**: Reads and parses CSV files
- **Team**: Shared by both teams
- **Status**: ✅ Complete
- **Key Components**:
  - `CSVReader` class - Handles CSV parsing
  - `loadJobsAsLinkedList()` - Load jobs into linked list
  - `loadResumesAsLinkedList()` - Load resumes into linked list
- **Note**: Array team needs to create similar functions for array loading

### 🧪 **Test Drivers**

#### **`test_linkedlist.cpp`** - Linked List Team Test Driver
- **Purpose**: Comprehensive testing for linked list implementation
- **Team**: Linked List Team
- **Status**: ✅ Complete test framework
- **Features**:
  - Interactive menu system
  - Data loading and display
  - Algorithm testing (when implemented)
  - Performance measurement
  - Comprehensive test suite

#### **`test_array.cpp`** - Array Team Test Driver
- **Purpose**: Comprehensive testing for array implementation
- **Team**: Array Team
- **Status**: ✅ Complete test framework
- **Features**:
  - Interactive menu system
  - Data loading and display
  - Algorithm testing (when implemented)
  - Performance measurement
  - Comprehensive test suite

### 📊 **Data Files**

#### **`csv/job_description.csv`** - Job Data
- **Purpose**: Contains job descriptions and requirements
- **Format**: CSV with columns for job details
- **Usage**: Input data for both teams
- **Status**: ✅ Ready

#### **`csv/resume.csv`** - Resume Data
- **Purpose**: Contains resume information and skills
- **Format**: CSV with columns for resume details
- **Usage**: Input data for both teams
- **Status**: ✅ Ready

---

## 🎯 **Team Responsibilities**

### 🔗 **Linked List Team Tasks**
1. **Complete `linkedlist_datastorage.hpp`**:
   - Implement bubble sort algorithms
   - Implement linear and binary search algorithms
   - Implement weighted scoring job matching
   - Add performance testing methods

2. **Enhance `linkedlist.hpp`** (if needed):
   - Add any additional methods required for algorithms
   - Optimize for performance

3. **Test Implementation**:
   - Use `test_linkedlist.cpp` for comprehensive testing
   - Measure performance metrics

### 📊 **Array Team Tasks**
1. **Complete `array.hpp`**:
   - Implement `CustomArrayV2<T>` class
   - Add all necessary methods for data management
   - Ensure memory management is correct

2. **Complete `array_datastorage.hpp`**:
   - Implement data loading methods
   - Implement same algorithms as linked list team
   - Add performance testing methods

3. **Test Implementation**:
   - Use `test_array.cpp` for comprehensive testing
   - Measure performance metrics

---

## 🔄 **Data Flow**

```
CSV Files → readcsv.hpp → preprocessor.hpp → Data Storage Classes → Algorithms → Results
     ↓              ↓              ↓                    ↓              ↓
job_description.csv → CSVReader → Text Processing → LinkedListDataStorage → Sorting/Searching/Matching
resume.csv          → Parsing    → Skill Extraction → ArrayDataStorage    → Performance Analysis
```

---

## ⚠️ **Important Notes**

### **Custom Data Structures Only**
- **NO STL containers** allowed (assignment requirement)
- Both teams must implement custom data structures
- Fair comparison between custom implementations

### **Identical Algorithms**
- Both teams must implement **identical algorithms**
- Only difference: underlying data structure operations
- Same time complexity, different implementation details

### **Shared Components**
- `model.hpp`, `preprocessor.hpp`, `readcsv.hpp` are shared
- Both teams use same data models and preprocessing
- Ensures fair comparison with identical input data

### **Performance Comparison**
- Measure execution time for each operation
- Compare memory usage
- Document results and analysis
- Focus on data structure operation differences

---

## 🚀 **Getting Started**

### **For Linked List Team**
1. Review `linkedlist_datastorage.hpp` current implementation
2. Start implementing bubble sort algorithms
3. Test with `test_linkedlist.cpp`
4. Move to searching algorithms
5. Implement job matching algorithms
6. Performance testing and analysis

### **For Array Team**
1. Complete `CustomArrayV2<T>` implementation in `array.hpp`
2. Complete `ArrayDataStorage` class in `array_datastorage.hpp`
3. Implement same algorithms as linked list team
4. Test with `test_array.cpp`
5. Performance testing and analysis

### **For Both Teams**
1. Use `main.cpp` to run both implementations
2. Compare performance results
3. Document findings
4. Prepare presentation materials

---

## 📞 **Support Files**

- **`team_guide.txt`** - Detailed implementation guidelines
- **`README.md`** - Project overview and setup instructions
- **`file_structure.txt`** - This comprehensive file guide

---

**Good luck with your implementation! 🎯**
